name: CI Pipeline

on:
  push:
    branches:
      - 'feature/**'          # новая функциональность
      - 'fix/**'              # багфиксы
      - 'hotfix/**'           # срочные исправления
      - 'chore/**'            # технические задачи
      - 'release-please--**'  # автоматические релизы

  pull_request:
    branches:
      - main                  # full pipeline: quick + unit + integration + e2e + security
      - test                  # quick + unit + integration
      - dev                   # quick + unit

env:
  GO_VERSION: '1.25'

jobs:
  # ==========================================
  # QUICK CHECKS - для всех push и PR
  # ==========================================
  quick-checks:
    name: Quick Checks (Lint & Format)
    runs-on: ubuntu-latest
    # Для release-please пропускаем даже quick checks
    if: |
      !contains(github.head_ref, 'release-please--') &&
      !contains(github.ref, 'release-please--')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'make fmt'"
            gofmt -s -l .
            exit 1
          fi
          echo "Code formatting is correct"

  # ==========================================
  # UNIT TESTS - для PR в dev, test, main
  # ==========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.head_ref, 'release-please--') &&
      (
        github.base_ref == 'dev' ||
        github.base_ref == 'test' ||
        github.base_ref == 'main'
      )
    needs: [quick-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run unit tests
        run: |
          go test -v -short -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  # ==========================================
  # BUILD - для PR в dev, test, main
  # ==========================================
  build:
    name: Build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.head_ref, 'release-please--') &&
      (
        github.base_ref == 'dev' ||
        github.base_ref == 'test' ||
        github.base_ref == 'main'
      )
    needs: [quick-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build application
        run: |
          go build -v -o ./bin/sso ./cmd/sso
          echo "Build successful"

  # ==========================================
  # INTEGRATION TESTS - для PR в test и main
  # ==========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.head_ref, 'release-please--') &&
      (
        github.base_ref == 'test' ||
        github.base_ref == 'main'
      )
    needs: [quick-checks, unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sso_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/sso_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go test -v -run Integration ./tests/integration/...

  # ==========================================
  # E2E TESTS - только для PR в main
  # ==========================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.head_ref, 'release-please--') &&
      github.base_ref == 'main'
    needs: [quick-checks, unit-tests, integration-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sso_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run e2e tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/sso_e2e?sslmode=disable
          REDIS_URL: redis://localhost:6379
          APP_PORT: 8080
        run: |
          go test -v -run E2E ./tests/e2e/...

  # ==========================================
  # SECURITY - только для PR в main
  # ==========================================
  security:
    name: Security Check
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.head_ref, 'release-please--') &&
      github.base_ref == 'main'
    needs: [quick-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './...'

      - name: Check for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # ==========================================
  # RELEASE PLEASE VALIDATION - минимальная проверка для release-please
  # ==========================================
  release-please-validation:
    name: Release Please Validation
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      contains(github.head_ref, 'release-please--') &&
      github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate changelog
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "CHANGELOG.md not found"
            exit 1
          fi
          echo "CHANGELOG.md exists"

      - name: Validate version files
        run: |
          # Проверить, что версии обновлены
          if grep -q "## \[" CHANGELOG.md; then
            echo "Version entry found in CHANGELOG"
          else
            echo "No version entry in CHANGELOG"
            exit 1
          fi
  # ==========================================
  # CI SUCCESS для PR в dev
  # ==========================================
  ci-success-dev:
    name: CI Success (Dev)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.base_ref == 'dev' &&
      !contains(github.head_ref, 'release-please--')
    needs: [quick-checks, unit-tests, build]
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.quick-checks.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "CI failed for dev!"
            exit 1
          fi
          echo "CI passed for dev! Ready to merge."

  # ==========================================
  # CI SUCCESS для PR в test
  # ==========================================
  ci-success-test:
    name: CI Success (Test)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.base_ref == 'test' &&
      !contains(github.head_ref, 'release-please--')
    needs: [quick-checks, unit-tests, integration-tests, build]
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.quick-checks.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "CI failed for test!"
            exit 1
          fi
          echo "CI passed for test! Ready to merge."

  # ==========================================
  # CI SUCCESS для PR в main
  # ==========================================
  ci-success-main:
    name: CI Success (Main)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.base_ref == 'main' &&
      !contains(github.head_ref, 'release-please--')
    needs: [quick-checks, unit-tests, integration-tests, e2e-tests, build, security]
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.quick-checks.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "CI failed for main!"
            exit 1
          fi
          echo "CI passed for main! Ready for production."
  # ==========================================
  # CI SUCCESS для release-please PR
  # ==========================================
  ci-success-release-please:
    name: CI Success (Release Please)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      contains(github.head_ref, 'release-please--') &&
      github.base_ref == 'main'
    needs: [release-please-validation]
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.release-please-validation.result }}" != "success" ]; then
            echo "Release Please validation failed!"
            exit 1
          fi
          echo "Release Please PR validated! Ready to merge and create release."